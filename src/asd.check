#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "s21_decimal.h"
#include "decimal_core.h"

int add_test(int func, int true) {
  
}
#suite Comprased 
#tcase equal

#test is_equal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(a, b), 0);

#test is_equal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(b, b), s21_is_equal(a, b));

#test is_equal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_equal(b, a), 0);

#tcase not_equal

#test is_not_equal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(a, b), 1);

#test is_not_equal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(b, b), s21_is_not_equal(a, b));

#test is_not_equal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_not_equal(b, a), 1);

#test is_not_equal__auto_generate
s21_decimal a = {{297293388, 544714707, 329431639, 0}};
chang_sign(&a);
s21_decimal b = {{1344688107, 485745822, 1475553454, 0}};
ck_assert_int_ne(s21_is_equal(a, b), s21_is_equal(b, b));

#test is_not_equal__auto
s21_decimal a = {{1135069503, 1879099755, 333599775, 0}};
s21_decimal b = {{629715255, 1134024340, 1746726690, 0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_not_equal(a, b), s21_is_equal(b, b));

#tcase greater

#test is_greater__true
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test is_greater__false
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{-9, 0, 9, 0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test is_greater_or_equal__true1
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test is_greater_or_equal__true2
s21_decimal a = {{-9, -9, -1, 0}};
s21_decimal b = {{0, 2, 54, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test is_greater_or_equal__false
s21_decimal a = {{-9, 0, 0, 0}};
s21_decimal b = {{0, 5, 8, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);

#test is_greater_or_equal__auto
s21_decimal a = {{210613260, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
ck_assert_int_ne(s21_is_greater_or_equal(a, b), s21_is_greater_or_equal(b, a));

#tcase less

#test is_less_or_equal__true1
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -6, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test is_less_or_equal__true2
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -1, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test is_less_or_equal__false
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-9, -9, -9, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);


#test is_less__true
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 1);

#test is_less__equal
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);

#test is_less__false
s21_decimal a = {{0, 0, -1, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);


#suite Another 

#tcase neagte

#test negate1
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#test negate2
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
chang_sign(&a);
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#tcase truncate

#test truncate1
s21_decimal a;// = {{45678943, 0, 0, 0}};
s21_from_int_to_decimal(45678943, &a);
s21_decimal b;
s21_decimal a1 = {{456, 0, 0, 0}};
chang_sign(&a);
chang_sign(&a1);
set_exp(&a, 5);
ck_assert_int_eq(s21_truncate(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, a1), 1);

#test truncate2
s21_decimal a = {{0, 0, -1, 0}};
s21_decimal b;
s21_decimal a1 = {{-1, 0, 0, 0}};
set_exp(&a, 32*2);
ck_assert_int_eq(s21_truncate(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, a1), 1);

#suite Arifmetic 
#tcase add

#test add__error_mark
s21_decimal a = {{2147483647, 85365008, -1, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
s21_decimal res;
ck_assert_int_eq(s21_add(a, b, &res), 1);

#test add__zero_plus_zero
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(s21_add(a, b, &res), 0);
ck_assert_int_eq(s21_is_equal(a, res), 1);

# test-loop(0, 5) add__100_tests
  srand(time(NULL));
  s21_decimal a = {{rand(), rand() % 1000000, rand() % 1000000, 0}};
  s21_decimal b = {{rand(), rand() % 1000000, rand() % 1000000, 0}};
  s21_decimal zero = {{0, 0, 0, 0}};
  s21_decimal res;
  if (rand() % 6 <= 4)
    chang_sign(&a);
  int s2 = rand() % 9;
  if (s2 > 3 && s2 < 7)
    chang_sign(&b);
  set_exp(&a,rand() % 3);
  set_exp(&b,rand() % 3);
  if (s21_add(a, b, &res) == 0) {
    ck_assert_int_eq(s21_add(a, b, &res), 0);
    if (check_sign(a) == 0 && check_sign(b) == 0) {
      ck_assert_int_eq(s21_is_greater(res, zero), 1);
    } else if (check_sign(a) == 1 && check_sign(b) == 1) {
      ck_assert_int_eq(s21_is_less(res, zero), 1);
    } else {
      s21_decimal one;
      s21_decimal two;
      if (check_sign(a) == 1) {
        chang_sign(&a);
        one = a;
        two = b;
      }
      if (check_sign(b) == 1) {
        chang_sign(&b);
        one = b;
        two = a;
      }
      if (s21_is_greater(one, two) == 1)
        ck_assert_int_eq(s21_is_less(one, res), s21_is_less(res, zero));
      else if (s21_is_greater(two, one) == 1)
        ck_assert_int_eq(s21_is_less(zero, res), s21_is_less(res, two));
    }
  } else {
    ck_assert_int_eq(s21_add(a, b, &res), 1);
  }

#test add__degree
srand(time(NULL));
s21_decimal a = {{2147483647, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
s21_decimal res;
s21_decimal zero = {{0, 0, 0, 0}};
if (rand() % 5 < 2)
  chang_sign(&a);
if (rand() % 5 < 3)
  chang_sign(&b);
set_exp(&a,rand() % 3);
set_exp(&b,rand() % 3);
  if (s21_add(a, b, &res) == 0) {
    ck_assert_int_eq(s21_add(a, b, &res), 0);
    if (check_sign(a) == 0 && check_sign(b) == 0) {
      ck_assert_int_eq(s21_is_greater(res, zero), 1);
    } else if (check_sign(a) == 1 && check_sign(b) == 1) {
      ck_assert_int_eq(s21_is_less(res, zero), 1);
    } else {
      s21_decimal one;
      s21_decimal two;
      if (check_sign(a) == 1) {
        chang_sign(&a);
        one = a;
        two = b;
      }
      if (check_sign(b) == 1) {
        chang_sign(&b);
        one = b;
        two = a;
      }
      if (s21_is_greater(one, two) == 1)
        ck_assert_int_eq(s21_is_less(one, res), s21_is_less(res, zero));
      else if (s21_is_greater(two, one) == 1)
        ck_assert_int_eq(s21_is_less(zero, res), s21_is_less(res, two));
    }
  } else {
    ck_assert_int_eq(s21_add(a, b, &res), 1);
  }

#tcase sub

#test-loop(0,10) sub__zero
srand(time(NULL));
s21_decimal a = {{rand(), rand(), rand(), 0}};
s21_decimal zero = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_sub(a, a, &a), 0);
ck_assert_int_eq(s21_is_equal(a, zero), 1);
  
#test sub__error_mark
srand(time(NULL));
s21_decimal a = {{rand(), rand(), -9, 0}};
s21_decimal b = {{rand(), rand(), -1, 0}};
s21_decimal zero = {{0, 0, 0, 0}};
chang_sign(&b);
ck_assert_int_eq(s21_sub(a, b, &a), 1);

#test sub__error_mark2
srand(time(NULL));
s21_decimal a = {{rand(), rand(), -9, 0}};
s21_decimal b = {{rand(), rand(), -1, 0}};
s21_decimal zero = {{0, 0, 0, 0}};
chang_sign(&a);
ck_assert_int_eq(s21_sub(a, b, &a), 1);

#test-loop(0,5) sub__100_tests
srand(time(NULL));
s21_decimal a = {{rand(), rand(), rand(), 0}};
s21_decimal b = {{rand(), rand() % 2, rand(), 0}};
s21_decimal zero = {{0, 0, 0, 0}};
s21_decimal res;
s21_decimal ser;
int point;
if (rand() % 6 <= 4)
  chang_sign(&a);
int s2 = rand() % 9;
if (s2 > 3 && s2 < 7)
  chang_sign(&b);
set_exp(&a,rand() % 28);
set_exp(&b,rand() % 28);
if ((point = s21_sub(a, b, &res)) == 0) {
  ck_assert_int_eq(point, 0);
  if (check_sign(a) == 1 && check_sign(b) == 1) {
    chang_sign(&a);
    chang_sign(&b);
    ck_assert_int_eq(s21_sub(b, a, &ser), 0);
    ck_assert_int_eq(s21_negate(ser, &ser), 0);
    ck_assert_int_eq(s21_is_equal(res, ser), 1);
  } else if (check_sign(a) == 1) {
    if ((point = s21_add(a, b, &ser)) == 1) {
    ck_assert_int_eq(point, 1);  
    } else {
      ck_assert_int_eq(point, 0);
      ck_assert_int_eq(s21_negate(ser, &ser), 0);
      ck_assert_int_eq(s21_is_equal(res, ser), 1);
    }
  } else if (check_sign(b) == 1) {
    if ((point = s21_add(a, b, &ser)) == 1) {
    ck_assert_int_eq(point, 1);  
    } else {
      ck_assert_int_eq(point, 0);
      ck_assert_int_eq(s21_is_equal(res, ser), 1);
    }
  }
} else {
  ck_assert_int_ne(point, 0);
}


#main-pre
tcase_set_timeout(tc3_1, 6);
tcase_set_timeout(tc3_2, 10);