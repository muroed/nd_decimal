#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#include "s21_decimal.h"
#include "decimal_core.h"

float Rand_R(float a, float b) {
  srand(time(NULL));
  float m = (float)rand() / RAND_MAX;
  float num = a + m * (b - a);
  return num;
}

#suite Comprased 
#tcase equal

#test isequal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(a, b), 0);

#test isequal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(b, b), s21_is_equal(a, b));

#test isequal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_equal(b, a), 0);

#tcase not_equal

#test isnot_equal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(a, b), 1);

#test isnot_equal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(b, b), s21_is_not_equal(a, b));

#test isnot_equal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_not_equal(b, a), 1);

#test isnot_equal__auto_generate
s21_decimal a = {{297293388, 544714707, 329431639, 0}};
chang_sign(&a);
s21_decimal b = {{1344688107, 485745822, 1475553454, 0}};
ck_assert_int_ne(s21_is_equal(a, b), s21_is_equal(b, b));

#test isnot_equal__auto
s21_decimal a = {{1135069503, 1879099755, 333599775, 0}};
s21_decimal b = {{629715255, 1134024340, 1746726690, 0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_not_equal(a, b), s21_is_equal(b, b));

#tcase greater

#test isgreater__sign
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_greater(a, b), 1);

#test isgreater__1
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test isgreater__12
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_greater(a, b), 1);

#test isgreater__13
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test isgreater__14
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater(b, a), 1);

#test isgreater__15
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater(b, a), 0);

#test isgreater__16
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_greater(b, a), 0);

#test isgreater__17
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test isgreater__18
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_greater(a, b), 1);

#test isgreater__0
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{-9, 0, 9, 0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test isgreater__02
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{9, 0, 9, 0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test isgreater_or_equal__11
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test isgreater_or_equal__12
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test isgreater_or_equal__13
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);

#test isgreater_or_equal__14
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater_or_equal(b, a), 1);

#test isgreater_or_equal__15
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_greater_or_equal(b, a), 1);

#test isgreater_or_equal__16
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_greater_or_equal(b, a), 1);

#test isgreater_or_equal__17
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);

#test isgreater_or_equal__18
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test isgreater_or_equal__19
s21_decimal a = {{-9, -9, -1, 0}};
s21_decimal b = {{0, 2, 54, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test isgreater_or_equal_sign
s21_decimal a = {{-9, -9, -1, 0}};
s21_decimal b = {{0, 2, 54, 0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);

#test isgreater_or_equal__0
s21_decimal a = {{-9, 0, 0, 0}};
s21_decimal b = {{0, 5, 8, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);

#test isgreater_or_equal__auto
s21_decimal a = {{210613260, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
ck_assert_int_ne(s21_is_greater_or_equal(a, b), s21_is_greater_or_equal(b, a));

#test isgreater_or_equal__20
float num1 = 1.375323;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isgreater_or_equal__21
int num1 = 2;
int num2 = 1;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__22
float num1 = 1.39;
float num2 = -1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__23
int num1 = 0;
int num2 = 0;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__24
int num1 = 3;
int num2 = 9;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isgreater_or_equal__25
int num1 = -3;
int num2 = -3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__26
int num1 = 10;
int num2 = 3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__27
float num1 = 10423546.34534534;
float num2 = 3.34534534;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__28
float num1 = -3.34534534;
float num2 = 3.34534534;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isgreater_or_equal__29
float num1 = 1042634.34534534;
float num2 = 10424546.34534534;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isgreater_or_equal__30
float num1 = 10426.34534534;
float num2 = 104234.345345;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isgreater_or_equal__31
float num1 = 1042.5667777;
float num2 = 1042.345345;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_greater_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isgreater_or_equal__32
s21_decimal dec5 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec6 = {{12, 0, 0, 0b10000000000000010000000000000000}};  //
ck_assert_int_eq(s21_is_greater_or_equal(dec5, dec6), 1);
ck_assert_int_eq(s21_is_greater_or_equal(dec6, dec5), 0);

s21_decimal dec7 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec8 = {{12, 0, 0, 0b00000000000000010000000000000000}};
ck_assert_int_eq(s21_is_greater_or_equal(dec7, dec8), 0);
ck_assert_int_eq(s21_is_greater_or_equal(dec8, dec7), 1);

s21_decimal dec1 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec2 = {{12, 0, 0, 0b00000000000000010000000000000000}};
ck_assert_int_eq(s21_is_greater_or_equal(dec1, dec2), 1);
ck_assert_int_eq(s21_is_greater_or_equal(dec2, dec1), 0);

s21_decimal dec3 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec4 = {{12, 0, 0, 0b10000000000000010000000000000000}};  //

ck_assert_int_eq(s21_is_greater_or_equal(dec3, dec4), 0);
ck_assert_int_eq(s21_is_greater_or_equal(dec4, dec3), 1);

s21_decimal dec9 = {{12345, 0, 0, 0}};
s21_decimal dec10 = {{12345, 0, 0, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(dec9, dec10), 1);
ck_assert_int_eq(s21_is_greater_or_equal(dec10, dec9), 1);

s21_decimal dec11 = {{0, 0, 0, 0}};
s21_decimal dec12 = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(dec11, dec12), 1);
ck_assert_int_eq(s21_is_greater_or_equal(dec12, dec11), 1);

#test greater_test_1
s21_decimal src1, src2;
src1.bits[0] = 0b01011000010000110001100100000110;
src1.bits[1] = 0b00000000011100101101011000000101;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test greater_test_2
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, S21_MAX_UINT, 0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test greater_test_3
s21_decimal dec5 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec6 = {
    {12, 0, 0, 0b10000000000000010000000000000000}};  //  -1.2;
ck_assert_int_eq(s21_is_greater(dec5, dec6), 1);
ck_assert_int_eq(s21_is_greater(dec6, dec5), 0);

s21_decimal dec7 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec8 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2;
ck_assert_int_eq(s21_is_greater(dec7, dec8), 0);
ck_assert_int_eq(s21_is_greater(dec8, dec7), 1);

s21_decimal dec1 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec2 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2
ck_assert_int_eq(s21_is_greater(dec1, dec2), 1);
ck_assert_int_eq(s21_is_greater(dec2, dec1), 0);

s21_decimal dec3 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec4 = {
    {12, 0, 0, 0b10000000000000010000000000000000}};  //   -1.2
ck_assert_int_eq(s21_is_greater(dec3, dec4), 0);
ck_assert_int_eq(s21_is_greater(dec4, dec3), 1);

#test greater_test_4
// 3856
s21_decimal src1, src2;
// src1 = 3;
// src2 = 3;

src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
int origin = 0;
ck_assert_int_eq(result, origin);

#test greater_test_5
  // 3928
s21_decimal src1, src2;
// src1 = 6521;
// src2 = 74121;

src1.bits[0] = 0b00000000000000000001100101111001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000010010000110001001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
int origin = 0;
ck_assert_int_eq(result, origin);

#tcase less

#test isless_or_equal__11
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -6, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test isless_or_equal__12
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -1, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test isless_or_equal__13
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);

#test isless_or_equal__14
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test isless_or_equal__15
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less_or_equal(b, a), 0);

#test isless_or_equal__16
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less_or_equal(b, a), 1);

#test isless_or_equal__17
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_less_or_equal(b, a), 1);

#test isless_or_equal__18
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test isless_or_equal__19
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);

#test isless_or_equal__110
s21_decimal a = {{-9, -9, -1, 0}};
s21_decimal b = {{0, 2, 54, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);

#test isless_or_equal__0
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-9, -9, -9, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);


#test isless__1
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 1);

#test isless__12
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_less(a, b), 0);

#test isless__13
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less(a, b), 1);

#test isless__14
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less(b, a), 0);

#test isless__15
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_less(b, a), 0);

#test isless__16
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_less(b, a), 0);

#test isless__16_1
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,10,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_less(b, a), 1);

#test isless__16_2
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,8,0}};
chang_sign(&a);
chang_sign(&b);
ck_assert_int_eq(s21_is_less(b, a), 0);

#test isless__17
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&a);
ck_assert_int_eq(s21_is_less(a, b), 1);

#test isless__18
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_less(a, b), 0);

#test isless__equal
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);

#test isless__0
s21_decimal a = {{0, 0, -1, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);

#test isless_1
float num1 = 1.375342323523;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isless_2
float num1 = 1.39;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isless_3
float num1 = 1.39;
float num2 = -1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isless_4
int num1 = 0;
int num2 = 0;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isless_5
int num1 = 3;
int num2 = 9;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isless_6
int num1 = -3;
int num2 = -3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 0);

#test isless_7
float num1 = -34534534.232446543232446543;
float num2 = -3.232323233232323233;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less(dec1, dec2);
ck_assert_int_eq(res, 1);

#test isless_8
s21_decimal dec5 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec6 = {{12, 0, 0, 0b10000000000000010000000000000000}};  // -1.2
ck_assert_int_eq(s21_is_less(dec5, dec6), 0);
ck_assert_int_eq(s21_is_less(dec6, dec5), 1);

s21_decimal dec7 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec8 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2;
ck_assert_int_eq(s21_is_less(dec7, dec8), 1);
ck_assert_int_eq(s21_is_less(dec8, dec7), 0);

s21_decimal dec1 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec2 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2;
ck_assert_int_eq(s21_is_less(dec1, dec2), 0);
ck_assert_int_eq(s21_is_less(dec2, dec1), 1);

s21_decimal dec3 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec4 = {
    {12, 0, 0, 0b10000000000000010000000000000000}};  //  -1.2;
ck_assert_int_eq(s21_is_less(dec3, dec4), 1);
ck_assert_int_eq(s21_is_less(dec4, dec3), 0);

s21_decimal dec9 = {{12345, 0, 0, 0}};
s21_decimal dec10 = {{12345, 0, 0, 0}};
ck_assert_int_eq(s21_is_less(dec9, dec10), 0);
ck_assert_int_eq(s21_is_less(dec10, dec9), 0);

s21_decimal dec11 = {{0, 0, 0, 0}};
s21_decimal dec12 = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_less(dec11, dec12), 0);
ck_assert_int_eq(s21_is_less(dec12, dec11), 0);

#test is_less_or_equal_1
float num1 = 1.375342323523;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_2
float num1 = 1.39;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_3
float num1 = 1.39;
float num2 = -1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_4
int num1 = 0;
int num2 = 0;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);
#test is_less_or_equal_5

int num1 = 3;
int num2 = 9;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_6
int num1 = -3;
int num2 = -3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);
#test is_less_or_equal_7
float num1 = -3453434.232446543232446543;
float num2 = -3.232323233232323233;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);
#test is_less_or_equal_8
float num1 = -34534553434.232446543232446543;
float num2 = 34534553434.232446543232446543;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_9
float num1 = 1.78;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_10
float num1 = -3453453452.0;
float num2 = -34.0;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_11
float num1 = 104235454634.34534534;
float num2 = 1042354546.34534534;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_12
float num1 = 1042354546.34534534;
float num2 = 104235454634.345345;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_13
float num1 = 1042.5667777;
float num2 = 1042.345345;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_14
float num1 = 1.375342323523;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_15
float num1 = 1.39;
float num2 = 1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_16
float num1 = 1.39;
float num2 = -1.39;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_17
int num1 = 0;
int num2 = 0;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_18
int num1 = 3;
int num2 = 9;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_19
int num1 = -3;
int num2 = -3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_26
int num1 = 10;
int num2 = 3;
s21_decimal dec1, dec2;
s21_from_int_to_decimal(num1, &dec1);
s21_from_int_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_20
float num1 = 104232346.34534534;
float num2 = 3.3453453234;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 0);

#test is_less_or_equal_21
float num1 = -3.34534534;
float num2 = 3.34534534;
s21_decimal dec1, dec2;
s21_from_float_to_decimal(num1, &dec1);
s21_from_float_to_decimal(num2, &dec2);
int res = s21_is_less_or_equal(dec1, dec2);
ck_assert_int_eq(res, 1);

#test is_less_or_equal_22
s21_decimal dec5 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec6 = {{12, 0, 0, 0b10000000000000010000000000000000}};  // -1.2;
ck_assert_int_eq(s21_is_less_or_equal(dec5, dec6), 0);
ck_assert_int_eq(s21_is_less_or_equal(dec6, dec5), 1);

s21_decimal dec7 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec8 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2;
ck_assert_int_eq(s21_is_less_or_equal(dec7, dec8), 1);
ck_assert_int_eq(s21_is_less_or_equal(dec8, dec7), 0);

s21_decimal dec1 = {
    {12345, 0, 0, 0b00000000000001000000000000000000}};  //  1.2345
s21_decimal dec2 = {{12, 0, 0, 0b00000000000000010000000000000000}};  //  1.2;
ck_assert_int_eq(s21_is_less_or_equal(dec1, dec2), 0);
ck_assert_int_eq(s21_is_less_or_equal(dec2, dec1), 1);

s21_decimal dec3 = {
    {12345, 0, 0, 0b10000000000001000000000000000000}};  // -1.2345
s21_decimal dec4 = {
    {12, 0, 0, 0b10000000000000010000000000000000}};  //  -1.2;
ck_assert_int_eq(s21_is_less_or_equal(dec3, dec4), 1);
ck_assert_int_eq(s21_is_less_or_equal(dec4, dec3), 0);

s21_decimal dec9 = {{12345, 0, 0, 0}};
s21_decimal dec10 = {{12345, 0, 0, 0}};
ck_assert_int_eq(s21_is_less_or_equal(dec9, dec10), 1);
ck_assert_int_eq(s21_is_less_or_equal(dec10, dec9), 1);

s21_decimal dec11 = {{0, 0, 0, 0}};
s21_decimal dec12 = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_less_or_equal(dec11, dec12), 1);
ck_assert_int_eq(s21_is_less_or_equal(dec12, dec11), 1);

#test is_less_or_equal_27
// 3586
s21_decimal src1, src2;
// src1 = 0;
// src2 = 0;

src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test is_less_or_equal_23
// 3658
s21_decimal src1, src2;
// src1 = 665464545;
// src2 = 8798232189789785;

src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test is_less_or_equal_24
// 3676
s21_decimal src1, src2;
// src1 = 2.7986531268974139743;
// src2 = 9.979623121254565121244554;

src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11010100101011100011110110001010;
src2.bits[1] = 0b01110100000101000010011110100011;
src2.bits[2] = 0b00000000000010000100000101000100;
src2.bits[3] = 0b00000000000110000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);

#test is_less_or_equal_25
// 3730
s21_decimal src1, src2;
// src1 = -0.77545545454546589781;
// src2 = 87894515154546456456;

src1.bits[0] = 0b10101100001010000001100001010101;
src1.bits[1] = 0b00110100001010010001111010111100;
src1.bits[2] = 0b00000000000000000000000000000100;
src1.bits[3] = 0b10000000000101000000000000000000;
src2.bits[0] = 0b00010011111011011111011110001000;
src2.bits[1] = 0b11000011110010000000101111011001;
src2.bits[2] = 0b00000000000000000000000000000100;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
int origin = 1;
ck_assert_int_eq(result, origin);






#suite Another 

#tcase neagte

#test negate1
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#test negate2
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
chang_sign(&a);
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#tcase truncate

#test truncate1
s21_decimal a = {{1456789436, 0, 0, 0}};
s21_decimal b;
s21_decimal a1 = {{14567, 0, 0, 0}};
chang_sign(&a);
chang_sign(&a1);
set_exp(&a, 5);
ck_assert_int_eq(s21_truncate(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, a1), 1);

#test-loop(0, 100) truncate__100_tests
srand(time(NULL));
int ran = rand();
int exp = rand() % 9;
int r = (int)(ran / pow(10, exp));
s21_decimal a, a1, b;
s21_from_int_to_decimal(r, &a1);
s21_from_int_to_decimal(ran, &a);
set_exp(&a, exp);
if (rand() % 6 <= 4) {
  chang_sign(&a);
  chang_sign(&a1);
}
ck_assert_int_eq(s21_truncate(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, a1), 1);

#tcase round

#test-loop(0, 100) round__100_tests
float n = Rand_R(-8388608, 8388608);
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_round(var, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(round(n), value, 10);

#test round1
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(5.5, &var);
s21_round(var, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(6.0, value, 10e-5);

#tcase floor

#test floor_1
float n = 744367.68425;
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_floor(var, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(floor(n), value, 10e-1);

#test floor_coverage
// если ошибка, то from_float_to_decimal не обрабатывает отрицательные
float n = -744367.68425;
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_floor(var, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(floor(n), value, 10e-1);


#suite Convert
#tcase from_float_to_decimal

#test from_float_to_decimal_1
float a = 153914752.5555000;
float b;
s21_decimal a_dec;
s21_from_float_to_decimal(a, &a_dec);
s21_from_decimal_to_float(a_dec, &b);
ck_assert_float_eq_tol(a, b, 30);

#test-loop(0,100) from_float_to_decimal_2
float n = Rand_R(-10, 10);
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(n, value, 1e-8);

#test from_float_to_decimal_6
float a = 0.0000000000000000000000000001;
float b;
s21_decimal a_dec;
s21_from_float_to_decimal(a, &a_dec);
s21_from_decimal_to_float(a_dec, &b);
ck_assert_float_eq_tol(a, b, 30);

#test from_float_to_decimal_7
float a = 0.000000000000000000000000000001;
float b;
s21_decimal a_dec;
s21_from_float_to_decimal(a, &a_dec);
s21_from_decimal_to_float(a_dec, &b);
ck_assert_float_eq_tol(a, b, 30);

#test from_float_to_decimal_8
float a = -7922815779189785472389873664100.0f;
s21_decimal a_dec;
ck_assert_int_eq(s21_from_float_to_decimal(a, &a_dec), 1);

#test from_float_to_decimal_9
s21_decimal var;
float val = NEG_INF;
ck_assert_int_eq(s21_from_float_to_decimal(val, &var), 1);

#test from_float_to_decimal_10
s21_decimal var;
float val = S21_NAN;
ck_assert_int_eq(s21_from_float_to_decimal(val, &var), 1);

#test from_float_to_decimal_3
float val = 0;
ck_assert_int_eq(s21_from_float_to_decimal(val, NULL), 1);

#test from_float_to_decimal_4
s21_decimal var;
float a = 0.0;
ck_assert_int_eq(s21_from_float_to_decimal(a, &var), 0);

#test from_float_to_decimal_5
s21_decimal var;
float a = -0.0;
ck_assert_int_eq(s21_from_float_to_decimal(a, &var), 0);

#test from_float_to_decimal_2_negative
float n = -8.1234;
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq(n, value);

#test from_float_to_decimal_2_negative2
float n = -8.4773;
s21_decimal var;
float value = 0;
s21_from_float_to_decimal(n, &var);
s21_from_decimal_to_float(var, &value);
ck_assert_float_eq_tol(n, value, 1e-8);

#test from_decimal_to_float_1
s21_decimal var = {{1, 0, 0, 134217728}};
ck_assert_int_eq(s21_from_decimal_to_float(var, NULL), 1);

#test from_decimal_to_float_2
s21_decimal var = {{1, 0, 0, 134217728}};
float value = 0;
ck_assert_int_eq(s21_from_decimal_to_float(var, &value), 1);

#test from_decimal_to_int_1
s21_decimal var = {{1, 0, 0, 134217728}};
ck_assert_int_eq(s21_from_decimal_to_int(var, NULL), 1);

#test from_decimal_to_int_2
s21_decimal var = {{1, 0, 0, 134217727}};
int val = 0;
ck_assert_int_eq(s21_from_decimal_to_int(var, &val), 1);

#test from_decimal_to_int_3
s21_decimal var = {{1, 1, 1, 134217728}};
int a = 0;
ck_assert_int_eq(s21_from_decimal_to_int(var, &a), 1);

#test from_int_to_decimal_1
int a = 0;
ck_assert_int_eq(s21_from_int_to_decimal(a, NULL), 1);

#suite Arifmetic 
#tcase add

#test add__error_mark
s21_decimal a = {{2147483647, 85365008, -1, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
s21_decimal res;
ck_assert_int_eq(s21_add(a, b, &res), 1);

#test add__signs1
s21_decimal a = {{ 20, 0, 0, 0 }};
s21_decimal b = {{ 10, 0, 0, 0 }};
s21_decimal c = {{ 30, 0, 0, 0 }};
chang_sign(&a);
chang_sign(&b);
chang_sign(&c);
ck_assert_int_eq(s21_add(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test add__signs2
s21_decimal b = {{ 20, 0, 0, 0 }};
s21_decimal a = {{ 10, 0, 0, 0 }};
s21_decimal c = {{ 30, 0, 0, 0 }};
chang_sign(&a);
chang_sign(&b);
chang_sign(&c);
ck_assert_int_eq(s21_add(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test add__signs3
s21_decimal b = {{ 20, 0, 0, 0 }};
s21_decimal a = {{ 10, 0, 0, 0 }};
s21_decimal c = {{ 10, 0, 0, 0 }};
chang_sign(&a);
ck_assert_int_eq(s21_add(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test add__signs4
s21_decimal b = {{ 20, 0, 0, 0 }};
s21_decimal a = {{ 10, 0, 0, 0 }};
s21_decimal c = {{ 10, 0, 0, 0 }};
chang_sign(&a);
chang_sign(&c);
ck_assert_int_eq(s21_add(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 0);

#test add__signs5
s21_decimal b = {{ 20, 0, 0, 0 }};
s21_decimal a = {{ 10, 0, 0, 0 }};
s21_decimal c = {{ 10, 0, 0, 0 }};
chang_sign(&b);
chang_sign(&c);
ck_assert_int_eq(s21_add(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test add__error_mark2
s21_decimal a = {{1, 0, 0, 0}};
s21_decimal b = {{21, 0, 0, 0}};
s21_decimal c = {{20, 0, 0, 0}};
chang_sign(&a);
s21_decimal res;
ck_assert_int_eq(s21_add(a, b, &res), 0);
ck_assert_int_eq(s21_is_equal(res, c), 1);

#test add__zero_plus_zero
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(s21_add(a, b, &res), 0);
ck_assert_int_eq(s21_is_equal(a, res), 1);

# test-loop(0, 50) add__100_tests
int a = (int)Rand_R(-10e5, 10e1);
int b = (int)Rand_R(-10e5, 10e1);
int c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
//print_decimal_bin(_a);
s21_add(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a + b, c);

#test-loop(0, 100) add__100_tests2
int a = (int)Rand_R(0, 10e5);
int b = (int)Rand_R(0, 10e5);
int c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_add(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a + b, c);

#test-loop(0, 100) add__100_tests3
float a = Rand_R(-10e8, 10e8);
float b = Rand_R(-10e8, 10e8);
float c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_float_to_decimal(a, &_a);
s21_from_float_to_decimal(b, &_b);
s21_add(_a, _b, &res);
s21_from_decimal_to_float(res, &c);
ck_assert_float_eq_tol(a + b, c, 10e2);


#test add__degree
srand(time(NULL));
s21_decimal a = {{2147483647, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
s21_decimal res;
s21_decimal zero = {{0, 0, 0, 0}};
  if (s21_add(a, b, &res) == 0) {
    ck_assert_int_eq(s21_add(a, b, &res), 0);
    if (check_sign(a) == 0 && check_sign(b) == 0) {
      ck_assert_int_eq(s21_is_greater(res, zero), 1);
    } else if (check_sign(a) == 1 && check_sign(b) == 1) {
      ck_assert_int_eq(s21_is_less(res, zero), 1);
    } else {
      s21_decimal one;
      s21_decimal two;
      if (check_sign(a) == 1) {
        chang_sign(&a);
        one = a;
        two = b;
      }
      if (check_sign(b) == 1) {
        chang_sign(&b);
        one = b;
        two = a;
      }
      if (s21_is_greater(one, two) == 1)
        ck_assert_int_eq(s21_is_less(one, res), s21_is_less(res, zero));
      else if (s21_is_greater(two, one) == 1)
        ck_assert_int_eq(s21_is_less(zero, res), s21_is_less(res, two));
    }
  } else {
    ck_assert_int_eq(s21_add(a, b, &res), 1);
  }

#test add_test_10
int num1 = 42;
int num2 = 30;
int sum_int = 72;
s21_decimal a, b;
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_add(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, sum_int);
ck_assert_int_eq(s21_add(a, b, &res_dec), 0);

#test add_test_11
int num1 = 1000;
int num2 = 2000;
int sum_int = 3000;
s21_decimal a, b;
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_add(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, sum_int);

#test add_test_12
s21_decimal src1 = {0};
src1.bits[0] = 0b00000000000000000000001111111111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
s21_decimal src2 = {0};
src2.bits[0] = 0b00000000000000000000001111111111;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
s21_decimal original_res = {0};
original_res.bits[0] = 0b00000000000000000010101111110101;
original_res.bits[1] = 0b00000000000000000000000000000000;
original_res.bits[2] = 0b00000000000000000000000000000000;
original_res.bits[3] = 0b00000000000000100000000000000000;
s21_decimal s21_res = {0};
s21_add(src1, src2, &s21_res);
ck_assert_int_eq(s21_add(src1, src2, &s21_res), 0);
ck_assert_int_eq(original_res.bits[0], s21_res.bits[0]);
ck_assert_int_eq(original_res.bits[1], s21_res.bits[1]);
ck_assert_int_eq(original_res.bits[2], s21_res.bits[2]);
ck_assert_int_eq(original_res.bits[3], s21_res.bits[3]);

#test add_test_13
s21_decimal src1 = {0};
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
s21_decimal src2 = {0};
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
s21_decimal original_res = {0};
original_res.bits[0] = 0b11111111111111111111111111111110;
original_res.bits[1] = 0b11111111111111111111111111111111;
original_res.bits[2] = 0b11111111111111111111111111111111;
original_res.bits[3] = 0b10000000000000000000000000000000;
s21_decimal s21_res = {0};
s21_add(src1, src2, &s21_res);
ck_assert_int_eq(s21_add(src1, src2, &s21_res), 0);
ck_assert_int_eq(original_res.bits[0], s21_res.bits[0]);
ck_assert_int_eq(original_res.bits[1], s21_res.bits[1]);
ck_assert_int_eq(original_res.bits[2], s21_res.bits[2]);
ck_assert_int_eq(original_res.bits[3], s21_res.bits[3]);

#test add_test_14
s21_decimal c = {{S21_MAX_UINT, 0, 0, 0}};
s21_decimal d = {{1, 0, 0, 0}};
s21_decimal etalon = {{0, 1, 0, 0}};

s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;

// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_res);
ck_assert_int_eq(add, 0);

ck_assert_int_eq(res.bits[3], etalon.bits[3]);
ck_assert_int_eq(res.bits[2], etalon.bits[2]);
ck_assert_int_eq(res.bits[1], etalon.bits[1]);
ck_assert_int_eq(res.bits[0], etalon.bits[0]);

int equal =
    s21_is_equal(res, etalon);  // Возвращаемое значение: 0 - 0 1 - 1
ck_assert_int_eq(equal, 1);

#test add_test_15
s21_decimal c = {{0b00000000000000000001100101111001, 0, 0, 0}};
s21_decimal d = {{0b00000000000000010010000110001001, 0, 0, 0}};
s21_decimal etalon = {{0b00000000000000010011101100000010, 0, 0, 0}};

s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;

// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_res);
ck_assert_int_eq(add, 0);

int equal =
    s21_is_equal(res, etalon);  // Возвращаемое значение: 0 - 0 1 - 1
ck_assert_int_eq(equal, 1);

#test add_test_16
s21_decimal c = {0};
c.bits[0] = 0b11111111111111111111111111111110;
c.bits[1] = 0b00000000000000000000000000000000;
c.bits[2] = 0b00000000000000000000000000000000;
c.bits[3] = 0b00000000000000000000000000000000;
s21_decimal d = {{1, 0, 0, 0}};
s21_decimal etalon = {0};
etalon.bits[0] = 0b11111111111111111111111111111111;
etalon.bits[1] = 0b00000000000000000000000000000000;
etalon.bits[2] = 0b00000000000000000000000000000000;
etalon.bits[3] = 0b00000000000000000000000000000000;
s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;

// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_res);
ck_assert_int_eq(add, 0);

ck_assert_int_eq(res.bits[0], etalon.bits[0]);
ck_assert_int_eq(res.bits[1], etalon.bits[1]);
ck_assert_int_eq(res.bits[2], etalon.bits[2]);
ck_assert_int_eq(res.bits[3], etalon.bits[3]);

#test add_test_17
s21_decimal c = {{0, 0, S21_MAX_UINT - 1, 0}};
s21_decimal d = {{0, 0, 1, 0}};
s21_decimal etalon = {{0, 0, S21_MAX_UINT, 0}};

s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;

// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_res);
ck_assert_int_eq(add, 0);

int equal =
    s21_is_equal(res, etalon);  // Возвращаемое значение: 0 - 0 1 - 1
ck_assert_int_eq(equal, 1);

#test add_test_18
s21_decimal c = {{1, 0, 0, 0}};
s21_decimal d = {{1, 0, 0, 0}};
s21_decimal etalon = {{2, 0, 0, 0}};

s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;

// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_res);
ck_assert_int_eq(add, 0);

int equal =
    s21_is_equal(res, etalon);  // Возвращаемое значение: 0 - 0 1 - 1
ck_assert_int_eq(equal, 1);

#test add_test_19
s21_decimal c = {{1000, 0, 0, 0}};
s21_decimal d = {{1000, 0, 0, 0}};
s21_decimal etalon = {{2000, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal* p_result = &result;
// 0 - OK 1 - число слишком велико или равно бесконечности 2 - число слишком
// мало или равно отрицательной бесконечности 3 - деление на 0
int add = s21_add(c, d, p_result);
ck_assert_int_eq(add, 0);
// Возвращаемое значение: 0 - 0 1 - 1
int equal = s21_is_equal(result, etalon);
ck_assert_int_eq(equal, 1);

#test add_test_20
s21_decimal c = {{5, 0, 0, 0}};
s21_decimal d = {{5, 0, 0, 0}};
s21_decimal etalon = {{10, 0, 0, 0}};
s21_decimal res = {{0, 0, 0, 0}};
s21_decimal* p_res = &res;
// 0 - OK 1 - число слишком велико или равно бесконечности
// 2 - число слишком мало или равно отрицательной бесконечности
// 3 - деление на 0
int add = s21_add(c, d, p_res);
int equal =
    s21_is_equal(res, etalon);  // Возвращаемое значение: 0 - 0 1 - 1
ck_assert_int_eq(add, 0);
ck_assert_int_eq(equal, 1);


#tcase sub

#test-loop(0, 100) sub__zero
srand(time(NULL));
s21_decimal a = {{rand(), rand(), rand(), 0}};
s21_decimal zero = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_sub(a, a, &a), 0);
ck_assert_int_eq(s21_is_equal(a, zero), 1);
  
#test sub__error_mark
srand(time(NULL));
s21_decimal a = {{rand(), rand(), -9, 0}};
s21_decimal b = {{rand(), rand(), -1, 0}};
chang_sign(&b);
ck_assert_int_eq(s21_sub(a, b, &a), 1);

#test sub__error_mark2
srand(time(NULL));
s21_decimal a = {{rand(), rand(), -9, 0}};
s21_decimal b = {{rand(), rand(), -1, 0}};
chang_sign(&a);
ck_assert_int_eq(s21_sub(a, b, &a), 1);

#test sub__error_mark3
srand(time(NULL));
s21_decimal a = {{1, 0, 0, 0}};
s21_decimal b = {{10, 0, 0, 0}};
chang_sign(&b);
ck_assert_int_eq(sub_lite(a, b, &a), 1);

#test sub__error_mark4
srand(time(NULL));
s21_decimal a = {{1, 0, 0, 0}};
s21_decimal b = {{21, 0, 0, 0}};
s21_decimal c = {{20, 0, 0, 0}};
chang_sign(&b);
chang_sign(&a);
ck_assert_int_eq(s21_sub(a, b, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test sub__error_mark5
srand(time(NULL));
s21_decimal a = {{1, 0, 0, 0}};
s21_decimal b = {{21, 0, 0, 0}};
s21_decimal c = {{20, 0, 0, 0}};
chang_sign(&b);
chang_sign(&a);
chang_sign(&c);
ck_assert_int_eq(s21_sub(b, a, &a), 0);
ck_assert_int_eq(s21_is_equal(a, c), 1);

#test-loop(0, 100) sub__100_tests
srand(time(NULL));
s21_decimal a = {{rand(), rand(), rand(), 0}};
s21_decimal b = {{rand(), rand() % 2, rand(), 0}};
s21_decimal res;
s21_decimal ser;
int point;
//if (rand() % 6 <= 4)
//  chang_sign(&a);
//int s2 = rand() % 9;
//if (s2 > 3 && s2 < 7)
//  chang_sign(&b);
set_exp(&a,rand() % 28);
set_exp(&b,rand() % 28);
//printf("%d", _i);
//print_decimal_int(a);
//print_decimal_int(b);
if ((point = s21_sub(a, b, &res)) == 0) {
  ck_assert_int_eq(point, 0);
  if (check_sign(a) == 1 && check_sign(b) == 1) {
    chang_sign(&a);
    chang_sign(&b);
    ck_assert_int_eq(s21_sub(b, a, &ser), 0);
    ck_assert_int_eq(s21_is_equal(res, ser), 1);
  } else if (check_sign(a) == 1) {
    chang_sign(&a);
    if ((point = s21_add(a, b, &ser)) == 1) {
    ck_assert_int_eq(point, 1);  
    } else {
      ck_assert_int_eq(point, 0);
      ck_assert_int_eq(s21_negate(ser, &ser), 0);
      ck_assert_int_eq(s21_is_equal(res, ser), 1);
    }
  } else if (check_sign(b) == 1) {
    chang_sign(&b);
    if ((point = s21_add(a, b, &ser)) == 1) {
    ck_assert_int_eq(point, 1);  
    } else {
      ck_assert_int_eq(point, 0);
      ck_assert_int_eq(s21_is_equal(res, ser), 1);
    }
  }
} else {
  ck_assert_int_ne(point, 0);
}


#tcase mul

#test mul_test1
int a = -1;
int b = -1;
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a * b, (int)(c));

#test mul_test2
int a = -1;
int b = -2;
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a * b, (int)(c));

#test mul_test3
int a = -2;
int b = -1;
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a * b, (int)(c));


#test-loop(0, 10) mul__100_tests
int a = (int)Rand_R(-10e3, 10e3);
int b = (int)Rand_R(-10e3, 10e3);
int c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
//print_decimal_bin(_a);
//print_decimal_bin(_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a * b, c);


#test-loop(0, 100) mul2__100_tests2
int a = (int)Rand_R(-10e3, 10e3);
int b = (int)Rand_R(-10e3, 10e3);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
if (a * b != (int)(c)) {
  printf("%d * %d\n", a, b);
}
ck_assert_int_eq(a * b, (int)(c));

#test-loop(0, 100) mul2__100_tests3
s21_decimal _a = {{100, 0, 0, 0}};
set_exp(&_a, 1);
s21_decimal _b ={{10, 0, 0, 0}};
s21_decimal res ={{100, 0, 0, 0}};
ck_assert_int_eq(s21_mul(_a, _b, &_a), 0);
ck_assert_int_eq(s21_is_equal(res, _a), 1);

#test-loop(0, 100) mul2__100_tests4
int a = (int)Rand_R(-10e3, 0);
int b = (int)Rand_R(-10e3, 0);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
if (a * b != (int)(c)) {
  printf("%d * %d\n", a, b);
}
ck_assert_int_eq(a * b, (int)(c));

#test-loop(0, 100) mul2__100_tests5
int a = (int)Rand_R(0, 10e3);
int b = (int)Rand_R(0, 10e3);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mul(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
if (a * b != (int)(c)) {
  printf("%d * %d\n", a, b);
}
ck_assert_int_eq(a * b, (int)(c));

#test mul2_tests4
s21_decimal _a = {{100, 0, 0, 0}};
set_exp(&_a, 28);
s21_decimal _b ={{10, 0, 0, 0}};
set_exp(&_b, 15);
s21_decimal res ={{0, 0, 0, 0}};
ck_assert_int_eq(s21_mul(_a, _b, &_a), 0);
ck_assert_int_eq(s21_is_equal(res, _a), 1);

#test mul_test6
int num1 = -10;
int num2 = 20;
int prod_int = -200;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mul(a, b, &res_dec);
ck_assert_int_eq(s21_from_decimal_to_int(res_dec, &res_int), 0);
ck_assert_int_eq(res_int, prod_int);

#test mul_test7
float num1 = 9403.0e2;
float num2 = 9403.0e2;
float res_origin = 884164090000;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_float_to_decimal(num1, &a);
s21_from_float_to_decimal(num2, &b);
s21_decimal res_dec = {0};
float res_float = 0;
s21_mul(a, b, &res_dec);
s21_from_decimal_to_float(res_dec, &res_float);
ck_assert_float_eq(res_float, res_origin);

#test mul_test8
float num1 = 9403.0e2;
int num2 = 202;
float res_origin = 189940600;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_float_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
float res_float = 0;
s21_mul(a, b, &res_dec);
s21_from_decimal_to_float(res_dec, &res_float);
ck_assert_float_eq(res_float, res_origin);

#test mul_test9
int num1 = -32768;
int num2 = 32768;
int res_origin = -1073741824;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mul(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#tcase mod

#test-loop(0, 100) mod__1
int a = (int)Rand_R(-11, 10e3);
int b = (int)Rand_R(-10e3, -1);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mod(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a % b, (int)(c));

#test-loop(0, 100) mod__2
int a = Rand_R(-10e8, 10e8);
int b = Rand_R(-10e8, 10e8);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mod(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq((int)(a % b), c);

#test-loop(0, 100) mod__3
int a = Rand_R(-1000, 1000);
int b = Rand_R(-20, -1);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mod(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq((a % b), c);

#test-loop(0, 100) mod__4
int a = Rand_R(-10e8, 0);
int b = Rand_R(-10e8, 0);
int c = 0;
s21_decimal _a;
s21_decimal _b;
s21_decimal res;
s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_mod(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq((a % b), c);

#test mod_5
int num1 = 3;
int num2 = 2;
int res_origin = num1 % num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mod(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test mod_6
int num1 = -98765;
int num2 = 1234;
int res_origin = num1 % num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mod(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test mod_7
int num1 = 30198;
int num2 = 20210;
int res_origin = num1 % num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mod(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test mod_8
int num1 = 342576;
int num2 = 1542134;
int res_origin = num1 % num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mod(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test mod_9
int num1 = 98765;
int num2 = 127234;
int res_origin = num1 % num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_mod(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);


#tcase div

#test div__1
int a = (int)Rand_R(-10e3, 10e3);
int b = (int)Rand_R(-10e3, 10e3);
int c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_div(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
ck_assert_int_eq(a / b, c);

#test div__2
int a = (int)Rand_R(1, 10e3);
int b = (int)Rand_R(1, 10e3);
int c = 0;

s21_decimal _a;
s21_decimal _b;
s21_decimal res;

s21_from_int_to_decimal(a, &_a);
s21_from_int_to_decimal(b, &_b);
s21_div(_a, _b, &res);
s21_from_decimal_to_int(res, &c);
if (a / b != (int)(c)) {
  printf("%d * %d\n", a, b);
}
ck_assert_int_eq(a / b, (int)(c));

#test div__3
s21_decimal dec1;
s21_decimal dec2;
int tmp1 = -100;
int tmp2 = -99999;
float res_s21 = 0;
float res = 0.00100001;
s21_from_int_to_decimal(tmp1, &dec1);
s21_from_int_to_decimal(tmp2, &dec2);
s21_decimal res1;
s21_div(dec1, dec2, &res1);
s21_from_decimal_to_float(res1, &res_s21);
ck_assert_float_eq_tol(res_s21, res, 6);

#test div__4
s21_decimal dec1;
s21_decimal dec2;
int tmp1 = 100;
float tmp2 = 999.99;
float res_s21 = 0.0;
float res = 0.100001;
s21_from_int_to_decimal(tmp1, &dec1);
s21_from_float_to_decimal(tmp2, &dec2);
s21_decimal res1;
s21_div(dec1, dec2, &res1);
s21_from_decimal_to_float(res1, &res_s21);
ck_assert_float_eq_tol(res_s21, res, 6);

#test div__5
s21_decimal dec1;
s21_decimal dec2;
int tmp1 = 100;
float tmp2 = 0;
s21_from_int_to_decimal(tmp1, &dec1);
s21_from_float_to_decimal(tmp2, &dec2);
s21_decimal res1;
ck_assert_int_eq(s21_div(dec1, dec2, &res1), 3);

#test div__6
int num1 = 100;
int num2 = 50;
int res_origin = 2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_div(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test div__7
int num1 = -32768;
int num2 = 2;
int res_origin = -16384;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_int_to_decimal(num1, &a);
s21_from_int_to_decimal(num2, &b);
s21_decimal res_dec = {0};
int res_int = 0;
s21_div(a, b, &res_dec);
s21_from_decimal_to_int(res_dec, &res_int);
ck_assert_int_eq(res_int, res_origin);

#test div__8
float num1 = -0.9;
float num2 = 0.000076;
float res_origin = num1 / num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_float_to_decimal(num1, &a);
s21_from_float_to_decimal(num2, &b);
s21_decimal res_dec = {0};
float res_float = 0;
s21_div(a, b, &res_dec);
s21_from_decimal_to_float(res_dec, &res_float);
ck_assert_float_eq(res_float, res_origin);

#test div__9
float num1 = -0.9e3;
float num2 = 30.32;
float res_origin = num1 / num2;
s21_decimal a = {0};
s21_decimal b = {0};
s21_from_float_to_decimal(num1, &a);
s21_from_float_to_decimal(num2, &b);
s21_decimal res_dec = {0};
float res_float = 0;
s21_div(a, b, &res_dec);
s21_from_decimal_to_float(res_dec, &res_float);
ck_assert_float_eq_tol(res_float, res_origin, 1e-4);

#main-pre
//tcase_set_timeout(tc2_2, 10);
//tcase_set_timeout(tc3_1, 6);
//tcase_set_timeout(tc3_2, 10);
