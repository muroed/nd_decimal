#include <stdio.h>
#include <stdlib.h>

#include "s21_decimal.h"
#include "decimal_core.h"

int add_test(int func, int true) {
  
}

#test is_equal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(a, b), 0);

#test is_equal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_equal(b, b), s21_is_equal(a, b));

#test is_equal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_equal(b, a), 0);

#test is_not_equal__not_equal
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(a, b), 1);

#test is_not_equal__equal
s21_decimal a = {{9,0,9,0}};
s21_decimal b = {{9,0,9,0}};
ck_assert_int_eq(s21_is_not_equal(b, b), s21_is_not_equal(a, b));

#test is_not_equal__different_exp
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{9,0,9,0}};
set_exp(&b, 10);
ck_assert_int_eq(s21_is_not_equal(b, a), 1);

#test is_greater__true
s21_decimal a = {{0,0,0,0}};
s21_decimal b = {{-9,0,9,0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test is_greater__false
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{-9, 0, 9, 0}};
ck_assert_int_eq(s21_is_greater(a, b), 0);

#test is_greater_or_equal__true1
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test is_greater_or_equal__true2
s21_decimal a = {{-9, -9, -1, 0}};
s21_decimal b = {{0, 2, 54, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 1);

#test is_greater_or_equal__false
s21_decimal a = {{-9, 0, 0, 0}};
s21_decimal b = {{0, 5, 8, 0}};
ck_assert_int_eq(s21_is_greater_or_equal(a, b), 0);


#test is_less_or_equal__true1
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -6, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test is_less_or_equal__true2
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-6, -6, -1, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 1);

#test is_less_or_equal__false
s21_decimal a = {{-6, -6, -6, 0}};
s21_decimal b = {{-9, -9, -9, 0}};
ck_assert_int_eq(s21_is_less_or_equal(a, b), 0);


#test is_less__true
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 1);

#test is_less__equal
s21_decimal a = {{0, 0, 0, 0}};
s21_decimal b = {{0, 0, 0, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);

#test is_less__false
s21_decimal a = {{0, 0, -1, 0}};
s21_decimal b = {{6, 6, 6, 0}};
ck_assert_int_eq(s21_is_less(a, b), 0);


#test is_not_equal__auto_generate
s21_decimal a = {{297293388, 544714707, 329431639, 0}};
chang_sign(&a);
s21_decimal b = {{1344688107, 485745822, 1475553454, 0}};
ck_assert_int_ne(s21_is_equal(a, b), s21_is_equal(b, b));


#test is_greater_or_equal__auto
s21_decimal a = {{210613260, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
ck_assert_int_ne(s21_is_greater_or_equal(a, b), s21_is_greater_or_equal(b, a));


#test is_not_equal__auto
s21_decimal a = {{1135069503, 1879099755, 333599775, 0}};
s21_decimal b = {{629715255, 1134024340, 1746726690, 0}};
chang_sign(&b);
ck_assert_int_eq(s21_is_not_equal(a, b), s21_is_equal(b, b));

#test negate1
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#test negate2
s21_decimal a = {{1, 1, 1, 0}};
s21_decimal b;
chang_sign(&a);
ck_assert_int_eq(s21_negate(a, &b), 0);
chang_sign(&a);
ck_assert_int_eq(s21_is_equal(b, a), 1);

#test truncate1
s21_decimal a = {{45678943, 0, 0, 0}};
s21_decimal b;
s21_decimal a1 = {{456, 0, 0, 0}};
chang_sign(&a);
chang_sign(&a1);
set_exp(&a, 5);
ck_assert_int_eq(s21_truncate(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, a1), 1);

#test add_lite__
s21_decimal a = {{210613260, 85365008, 330809813, 0}};
s21_decimal b = {{1039012127, 388364480, 803205246, 0}};
s21_decimal res;
add_lite(a, b, &res);
